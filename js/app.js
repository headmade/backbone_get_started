// Generated by CoffeeScript 1.6.2
(function() {
  var Form1, Validates, ViewClass, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };

  ViewClass = (function(_super) {
    __extends(ViewClass, _super);

    function ViewClass() {
      _ref = ViewClass.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ViewClass.prototype._modelBinder = void 0;

    ViewClass.prototype.events = {
      "click #first_step_submit": "commit"
    };

    ViewClass.prototype.initialize = function() {
      _.bindAll(this);
      return this._modelBinder = new Backbone.ModelBinder;
    };

    ViewClass.prototype.render = function() {
      this.setElement($(".formBlock1"));
      this._modelBinder.bind(this.model, this.el);
      return this;
    };

    ViewClass.prototype.commit = function() {
      console.log(this.validate());
      if (this.validate()) {
        console.log('commit');
        return $("#test-content").html(JSON.stringify(this.model.toJSON()));
      }
    };

    ViewClass.prototype.validate = function() {
      var key, valid;

      valid = true;
      for (key in this.model.attributes) {
        valid = this.validatefield(key) && valid;
      }
      return valid;
    };

    ViewClass.prototype.validatefield = function(key) {
      var valid, validator, validators, value, _i, _len;

      valid = true;
      value = this.model.get(key);
      validators = this.model.getValidators(key);
      for (_i = 0, _len = validators.length; _i < _len; _i++) {
        validator = validators[_i];
        validator = eval("new Validates." + (validator.capitalize()));
        valid && (valid = validator.valid(value));
        if (valid) {
          this.clearError(key);
        } else {
          this.setError(key);
        }
      }
      return valid;
    };

    ViewClass.prototype.setError = function(key) {
      var $label;

      $label = $("#" + key + "_label");
      if ($label.length) {
        return $label.addClass("accessError");
      } else {
        return $("#" + key).parent().addClass('textfieldError');
      }
    };

    ViewClass.prototype.clearError = function(key) {
      var $label;

      $label = $("#" + key + "_label");
      if ($label.length) {
        return $label.removeClass("accessError");
      } else {
        return $("#" + key).parent().removeClass('textfieldError');
      }
    };

    return ViewClass;

  })(Backbone.View);

  $(function() {
    var model, view;

    model = new Form1;
    view = new ViewClass({
      model: model
    });
    return console.log(view.render());
  });

  Backbone.Form = (function(_super) {
    __extends(Form, _super);

    function Form() {
      _ref1 = Form.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Form.prototype.schema = {};

    Form.prototype.defaults = function() {
      var attributes, key;

      attributes = {};
      for (key in this.schema) {
        attributes[key] = this.schema[key]['defaults'] || '';
      }
      return attributes;
    };

    Form.prototype.getValidators = function(key) {
      var validators;

      validators = [];
      if (this.schema[key]) {
        validators = this.schema[key]['validators'];
      }
      return validators;
    };

    return Form;

  })(Backbone.Model);

  Form1 = (function(_super) {
    __extends(Form1, _super);

    function Form1() {
      _ref2 = Form1.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Form1.prototype.schema = {
      maf_first_name: {
        validators: ['required']
      },
      maf_last_name: {
        validators: ['required']
      },
      maf_email: {
        validators: ['email']
      },
      maf_second_name: {
        validators: ['required']
      },
      maf_mobile_phone: {
        validators: ['required']
      },
      maf_birth_date: {
        validators: ['required']
      },
      maf_accept_rules: {
        validators: ['required']
      }
    };

    return Form1;

  })(Backbone.Form);

  Validates = {};

  Validates.Required = (function() {
    function Required() {}

    Required.prototype.valid = function(value) {
      return value !== '' && value;
    };

    return Required;

  })();

  Validates.Email = (function() {
    function Email() {}

    Email.prototype.valid = function(value) {
      return /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i.test(value);
    };

    return Email;

  })();

  $(function() {
    return $("input").each(function() {
      var $this;

      $this = $(this);
      return $this.attr("placeholder", $this.attr("hint"));
    });
  });

  $(function() {
    var Item, ItemView, List, ListView, testView, _ref3, _ref4, _ref5, _ref6;

    Item = (function(_super) {
      __extends(Item, _super);

      function Item() {
        _ref3 = Item.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      Item.prototype.defaults = {
        part1: "Hello",
        part2: "Backbone"
      };

      return Item;

    })(Backbone.Model);
    List = (function(_super) {
      __extends(List, _super);

      function List() {
        _ref4 = List.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      List.prototype.model = Item;

      return List;

    })(Backbone.Collection);
    ItemView = (function(_super) {
      __extends(ItemView, _super);

      function ItemView() {
        this.unrender = __bind(this.unrender, this);
        this.render = __bind(this.render, this);        _ref5 = ItemView.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      ItemView.prototype.tagName = "li";

      ItemView.prototype.initialize = function() {
        _.bindAll(this);
        this.model.bind("change", this.render);
        return this.model.bind("remove", this.unrender);
      };

      ItemView.prototype.render = function() {
        $(this.el).html("<span>" + (this.model.get('part1')) + " " + (this.model.get('part2')) + "</span>\n<span class='swap'>swap</span>\n<span class='delete'>delete</span>");
        return this;
      };

      ItemView.prototype.unrender = function() {
        return $(this.el).remove();
      };

      ItemView.prototype.swap = function() {
        return this.model.set({
          part1: this.model.get("part2"),
          part2: this.model.get("part1")
        });
      };

      ItemView.prototype.remove = function() {
        return this.model.destroy();
      };

      ItemView.prototype.events = {
        "click .swap": "swap",
        "click .delete": "remove"
      };

      return ItemView;

    })(Backbone.View);
    ListView = (function(_super) {
      __extends(ListView, _super);

      function ListView() {
        _ref6 = ListView.__super__.constructor.apply(this, arguments);
        return _ref6;
      }

      ListView.prototype.el = $("body");

      ListView.prototype.initialize = function() {
        _.bindAll(this);
        this.collection = new List;
        this.collection.bind("add", this.appendItem);
        this.counter = 0;
        return this.render();
      };

      ListView.prototype.render = function() {
        $(this.el).append("<button class='btn'>Add List Item</button>");
        return $(this.el).append("<ul></ul>");
      };

      ListView.prototype.addItem = function() {
        var item;

        this.counter++;
        item = new Item;
        item.set({
          part2: "" + (item.get('part2')) + " " + this.counter
        });
        return this.collection.add(item);
      };

      ListView.prototype.appendItem = function(item) {
        var item_view;

        item_view = new ItemView({
          model: item
        });
        return $("ul").append(item_view.render().el);
      };

      ListView.prototype.events = {
        "click button": "addItem"
      };

      return ListView;

    })(Backbone.View);
    Backbone.sync = function(method, model, success, error) {
      return success();
    };
    return testView = new ListView;
  });

}).call(this);
