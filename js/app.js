// Generated by CoffeeScript 1.6.2
(function() {
  var Masks, Questionaire, Router, TBank, Validates, ViewClass, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26, _ref27, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };

  Questionaire = (function(_super) {
    __extends(Questionaire, _super);

    function Questionaire() {
      this.gotoStep = __bind(this.gotoStep, this);      _ref = Questionaire.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Questionaire.prototype.current_step = 1;

    Questionaire.prototype.events = {
      "click .btnClose": "gotoStep(0)"
    };

    Questionaire.prototype.initialize = function() {
      this.collection = [];
      return this.model = [];
    };

    Questionaire.prototype.render = function() {
      var _base, _base1, _name, _name1;

      (_base = this.model)[_name = this.current_step] || (_base[_name] = eval("new TBank.Form" + this.current_step));
      (_base1 = this.collection)[_name1 = this.current_step] || (_base1[_name1] = new ViewClass({
        model: this.model[this.current_step]
      }));
      this.collection[this.current_step].render();
      if (this.current_step !== 1) {
        $(".formBlock2").show();
        $(".step" + this.current_step).show().siblings().hide();
        return $("#other_step_submit").attr("href", "#step" + (this.current_step + 1));
      } else {
        $(".formBlock2").hide();
        $(".step1").show().siblings().hide();
        return $("#other_step_submit").attr("href", "#step1");
      }
    };

    Questionaire.prototype.gotoStep = function(step) {
      this.current_step = step * 1;
      return this.render();
    };

    return Questionaire;

  })(Backbone.View);

  Router = (function(_super) {
    __extends(Router, _super);

    function Router() {
      _ref1 = Router.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Router.prototype.routes = {
      '': 'first_form',
      'step:page': 'gotoStep',
      'maf_close_form': "close_confirm"
    };

    Router.prototype.close_confirm = function() {
      if (confirm("Вы уверены что хотите закрыть анкету?")) {
        return router.navigate("step1", {
          trigger: true
        });
      } else {
        return router.navigate("step" + questView.current_step, {
          trigger: false
        });
      }
    };

    Router.prototype.first_form = function() {
      questView.gotoStep(1);
      return console.log("1st form");
    };

    Router.prototype.gotoStep = function(step) {
      console.log("Form №" + step);
      return questView.gotoStep(step);
    };

    return Router;

  })(Backbone.Router);

  $(function() {
    window.questView = new Questionaire({
      el: "#questionnaire",
      current_step: 1
    });
    questView.render();
    window.router = new Router;
    return Backbone.history.start();
  });

  window.TBank = TBank = {};

  TBank.cookieSync = function(method, model, options) {
    var attributes, model_name;

    $.cookie.json = true;
    model_name = model.__proto__.constructor.name;
    switch (method) {
      case 'read':
        attributes = $.cookie(model_name);
        if (attributes) {
          return model.attributes = attributes;
        }
        break;
      case 'create':
        return $.cookie(model_name, model.toJSON());
    }
  };

  Backbone.Form = (function(_super) {
    __extends(Form, _super);

    function Form() {
      _ref2 = Form.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Form.prototype.schema = {};

    Form.prototype.defaults = function() {
      var attributes, key;

      attributes = {};
      for (key in this.schema) {
        attributes[key] = this.schema[key]['defaults'] || '';
      }
      return attributes;
    };

    Form.prototype.initialize = function(options) {
      Form.__super__.initialize.call(this, options);
      return this.fetch();
    };

    Form.prototype.getValidators = function(key) {
      var validators;

      validators = [];
      if (this.schema[key]) {
        validators = this.schema[key]['validators'];
      }
      return validators;
    };

    Form.prototype.getMask = function(key) {
      if (this.schema[key]) {
        return this.schema[key]["mask"];
      }
    };

    Form.prototype.sync = function() {
      return TBank.cookieSync.apply(this, arguments);
    };

    return Form;

  })(Backbone.Model);

  TBank.Form1 = (function(_super) {
    __extends(Form1, _super);

    function Form1() {
      _ref3 = Form1.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Form1.prototype.schema = {
      maf_first_name: {
        validators: ['name']
      },
      maf_last_name: {
        validators: ['name']
      },
      maf_email: {
        validators: ['email']
      },
      maf_second_name: {
        validators: ['name']
      },
      maf_mobile_phone: {
        validators: ['phone'],
        mask: "phone"
      },
      maf_birth_date: {
        validators: ['date'],
        mask: "date"
      },
      maf_accept_rules: {
        validators: ['required']
      }
    };

    return Form1;

  })(Backbone.Form);

  TBank.Form2 = (function(_super) {
    __extends(Form2, _super);

    function Form2() {
      _ref4 = Form2.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Form2.prototype.schema = {
      maf_zagran_fio: {
        validators: ['latinname']
      },
      maf_changed_fio: {
        validators: []
      },
      maf_passport_seria: {
        validators: ['pasportseria'],
        mask: "pasportseria"
      },
      maf_passport_number: {
        validators: ['pasportnumber'],
        mask: 'pasportnumber'
      },
      maf_passport_issue: {
        validators: ['name'],
        mask: 'date'
      },
      maf_passport_organisation: {
        validators: ['name']
      },
      maf_passport_code: {
        validators: ['name'],
        mask: 'pasportcode'
      },
      maf_birth_place: {
        validators: ['name']
      }
    };

    return Form2;

  })(Backbone.Form);

  Masks = {};

  Masks.Base = (function() {
    function Base($el) {
      $el.mask(this.mask);
    }

    return Base;

  })();

  Masks.Phone = (function(_super) {
    __extends(Phone, _super);

    function Phone() {
      _ref5 = Phone.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    Phone.prototype.mask = "+7 (999) 999-99-99";

    return Phone;

  })(Masks.Base);

  Masks.Date = (function(_super) {
    __extends(Date, _super);

    function Date() {
      _ref6 = Date.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    Date.prototype.mask = "99.99.9999";

    return Date;

  })(Masks.Base);

  Masks.Pasportseria = (function(_super) {
    __extends(Pasportseria, _super);

    function Pasportseria() {
      _ref7 = Pasportseria.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    Pasportseria.prototype.mask = "9999";

    return Pasportseria;

  })(Masks.Base);

  Masks.Pasportcode = (function(_super) {
    __extends(Pasportcode, _super);

    function Pasportcode() {
      _ref8 = Pasportcode.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    Pasportcode.prototype.mask = "999-999";

    return Pasportcode;

  })(Masks.Base);

  Masks.Pasportnumber = (function(_super) {
    __extends(Pasportnumber, _super);

    function Pasportnumber() {
      _ref9 = Pasportnumber.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    Pasportnumber.prototype.mask = "999999";

    return Pasportnumber;

  })(Masks.Base);

  Validates = {};

  Validates.Base = (function() {
    function Base() {}

    Base.prototype.valid = function(value) {
      return this.regular.test(value);
    };

    return Base;

  })();

  Validates.Required = (function() {
    function Required() {}

    Required.prototype.valid = function(value) {
      return $.trim(value) !== '' && value;
    };

    return Required;

  })();

  Validates.Email = (function(_super) {
    __extends(Email, _super);

    function Email() {
      _ref10 = Email.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    Email.prototype.regular = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;

    return Email;

  })(Validates.Base);

  Validates.Name = (function(_super) {
    __extends(Name, _super);

    function Name() {
      _ref11 = Name.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    Name.prototype.regular = /^[а-яА-ЯёЁ\s-]{2,}$/;

    return Name;

  })(Validates.Base);

  Validates.Phone = (function(_super) {
    __extends(Phone, _super);

    function Phone() {
      _ref12 = Phone.__super__.constructor.apply(this, arguments);
      return _ref12;
    }

    Phone.prototype.regular = /^\+\d\s\([\d]{3}\)\s[\d]{3}\-[\d]{2}\-[\d]{2}$/;

    return Phone;

  })(Validates.Base);

  Validates.Date = (function(_super) {
    __extends(Date, _super);

    function Date() {
      _ref13 = Date.__super__.constructor.apply(this, arguments);
      return _ref13;
    }

    Date.prototype.regular = /^[\d]{2}\.[\d]{2}\.[\d]{4}$/;

    return Date;

  })(Validates.Base);

  Validates.Country = (function(_super) {
    __extends(Country, _super);

    function Country() {
      _ref14 = Country.__super__.constructor.apply(this, arguments);
      return _ref14;
    }

    Country.prototype.regular = /^[а-яА-ЯёЁ\,\s]{3,}[\s\,а-яА-ЯёЁ]+$/;

    return Country;

  })(Validates.Base);

  Validates.Latinname = (function(_super) {
    __extends(Latinname, _super);

    function Latinname() {
      _ref15 = Latinname.__super__.constructor.apply(this, arguments);
      return _ref15;
    }

    Latinname.prototype.regular = /^[a-zA-Z-]{3,}\s[a-zA-Z-]{3,}$/;

    return Latinname;

  })(Validates.Base);

  Validates.Pasportseria = (function(_super) {
    __extends(Pasportseria, _super);

    function Pasportseria() {
      _ref16 = Pasportseria.__super__.constructor.apply(this, arguments);
      return _ref16;
    }

    Pasportseria.prototype.regular = /^[\d]{2}-?\s?[\d]{2}$/;

    return Pasportseria;

  })(Validates.Base);

  Validates.Pasportnumber = (function(_super) {
    __extends(Pasportnumber, _super);

    function Pasportnumber() {
      _ref17 = Pasportnumber.__super__.constructor.apply(this, arguments);
      return _ref17;
    }

    Pasportnumber.prototype.regular = /^\d{6}$/;

    return Pasportnumber;

  })(Validates.Base);

  Validates.Pasportcode = (function(_super) {
    __extends(Pasportcode, _super);

    function Pasportcode() {
      _ref18 = Pasportcode.__super__.constructor.apply(this, arguments);
      return _ref18;
    }

    Pasportcode.prototype.regular = /^\d{3}-?\d{3}$/;

    return Pasportcode;

  })(Validates.Base);

  Validates.Simpletext = (function(_super) {
    __extends(Simpletext, _super);

    function Simpletext() {
      _ref19 = Simpletext.__super__.constructor.apply(this, arguments);
      return _ref19;
    }

    Simpletext.prototype.regular = /^[а-яА-ЯёЁ№0-9,\.\'\"\-\«\»\—\s]{3,}$/;

    return Simpletext;

  })(Validates.Base);

  Validates.Commontext = (function(_super) {
    __extends(Commontext, _super);

    function Commontext() {
      _ref20 = Commontext.__super__.constructor.apply(this, arguments);
      return _ref20;
    }

    Commontext.prototype.regular = /^[a-zA-Zа-яА-ЯёЁ№0-9,\.\'\"\-\«\»\—\s]{3,}$/;

    return Commontext;

  })(Validates.Base);

  Validates.Anytext = (function(_super) {
    __extends(Anytext, _super);

    function Anytext() {
      _ref21 = Anytext.__super__.constructor.apply(this, arguments);
      return _ref21;
    }

    Anytext.prototype.regular = /^.{3,}$/;

    return Anytext;

  })(Validates.Base);

  Validates.Adress = (function(_super) {
    __extends(Adress, _super);

    function Adress() {
      _ref22 = Adress.__super__.constructor.apply(this, arguments);
      return _ref22;
    }

    Adress.prototype.regular = /^[а-яА-Я\.\(\)\s-,0-9]{3,}$/;

    return Adress;

  })(Validates.Base);

  Validates.Adressnum = (function(_super) {
    __extends(Adressnum, _super);

    function Adressnum() {
      _ref23 = Adressnum.__super__.constructor.apply(this, arguments);
      return _ref23;
    }

    Adressnum.prototype.regular = /^[а-яА-Яa-zA-Z\/\(\)\s-,0-9]{1,}$/;

    return Adressnum;

  })(Validates.Base);

  Validates.Number = (function(_super) {
    __extends(Number, _super);

    function Number() {
      _ref24 = Number.__super__.constructor.apply(this, arguments);
      return _ref24;
    }

    Number.prototype.regular = /^\d{3,}$/;

    return Number;

  })(Validates.Base);

  Validates.Codeword = (function(_super) {
    __extends(Codeword, _super);

    function Codeword() {
      _ref25 = Codeword.__super__.constructor.apply(this, arguments);
      return _ref25;
    }

    Codeword.prototype.regular = /^[а-яА-Я]{3,}$/;

    return Codeword;

  })(Validates.Base);

  Validates.Checkcode = (function(_super) {
    __extends(Checkcode, _super);

    function Checkcode() {
      _ref26 = Checkcode.__super__.constructor.apply(this, arguments);
      return _ref26;
    }

    Checkcode.prototype.regular = /^\d{5}$/;

    return Checkcode;

  })(Validates.Base);

  ViewClass = (function(_super) {
    __extends(ViewClass, _super);

    function ViewClass() {
      _ref27 = ViewClass.__super__.constructor.apply(this, arguments);
      return _ref27;
    }

    ViewClass.prototype._modelBinder = void 0;

    ViewClass.prototype.events = {
      "click #first_step_submit": "commit"
    };

    ViewClass.prototype.initialize = function() {
      _.bindAll(this);
      return this._modelBinder = new Backbone.ModelBinder;
    };

    ViewClass.prototype.render = function() {
      var key, mask;

      this.setElement($(".formBlock1"));
      this._modelBinder.bind(this.model, this.el);
      for (key in this.model.attributes) {
        if (mask = this.model.getMask(key)) {
          eval("new Masks." + (mask.capitalize()) + "( $('#" + key + "') )");
        }
      }
      return this;
    };

    ViewClass.prototype.commit = function() {
      console.log(this.model.toJSON());
      if (1) {
        console.log('commit');
        this.model.save();
        router.navigate("step2", {
          trigger: true
        });
        return $("#test-content").html(JSON.stringify(this.model.toJSON()));
      }
    };

    ViewClass.prototype.validate = function() {
      var key, valid;

      valid = true;
      for (key in this.model.attributes) {
        valid = this.validatefield(key) && valid;
      }
      return valid;
    };

    ViewClass.prototype.validatefield = function(key) {
      var valid, validator, validators, value, _i, _len;

      valid = true;
      value = this.model.get(key);
      validators = this.model.getValidators(key);
      for (_i = 0, _len = validators.length; _i < _len; _i++) {
        validator = validators[_i];
        validator = eval("new Validates." + (validator.capitalize()));
        valid && (valid = validator.valid(value));
        if (valid) {
          this.clearError(key);
        } else {
          this.setError(key);
        }
      }
      return valid;
    };

    ViewClass.prototype.setError = function(key) {
      var $label;

      $label = $("#" + key + "_label");
      if ($label.length) {
        return $label.addClass("accessError");
      } else {
        return $("#" + key).parent().addClass('textfieldError');
      }
    };

    ViewClass.prototype.clearError = function(key) {
      var $label;

      $label = $("#" + key + "_label");
      if ($label.length) {
        return $label.removeClass("accessError");
      } else {
        return $("#" + key).parent().removeClass('textfieldError');
      }
    };

    return ViewClass;

  })(Backbone.View);

  $(function() {
    return $("input").each(function() {
      var $this;

      $this = $(this);
      return $this.attr("placeholder", $this.attr("hint"));
    });
  });

}).call(this);
